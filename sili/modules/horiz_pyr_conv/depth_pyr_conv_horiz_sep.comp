#version 430

//layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout (local_size_x_id = 0) in;

struct PyramidLevel {
    int startIdx;
    int width;
    int height;
};

layout(std430, binding = 0) buffer InputBuffer {
    float inputImage[];
};

layout(std430, binding = 1) buffer PyramidData {
    int channels;
    int levels;
    PyramidLevel pyramidLevels[];
};

layout(std430, binding = 2) buffer OutputBuffer {
    float outputImage[];
};

layout(std430, binding = 3) buffer vertConvBuffer {
    uint kernel_width;
    float horizWeights[];
};

void main() {
    uint idx = gl_GlobalInvocationID.x;

    int out_level = -1;
    int out_startIdx = -1;
    int out_width = -1;
    int out_height = -1;
    for(int level=0;level<levels-1;level++) {
        if(int(idx)>=pyramidLevels[level].startIdx*channels && int(idx)<pyramidLevels[level+1].startIdx*channels){
            out_level = level;
            out_startIdx = pyramidLevels[level].startIdx*channels;
            out_width = pyramidLevels[level].width;
            out_height = pyramidLevels[level].height;
            // no breaks. All invocations run the same lines.
        }
    }
    if(out_level==-1){// top level wasn't checked
        out_level = levels-1;
        out_startIdx = pyramidLevels[out_level].startIdx*channels;
        out_width = pyramidLevels[out_level].width;
        out_height = pyramidLevels[out_level].height;
    }

    // iterate indices correctly to maximize cache optimization:
    // we have i0,i1,i2,i3...
    // we want x,y,c: x0y0c0, x0y0c1, ... x0y1c0...
    // for x,y,c: x=/h;y=%h, for y,x,c: x=%w,y=/w
    // however apparelty w&h messed up somewhere?
    uint out_x_idx = ((idx-out_startIdx)/channels)%out_height;
    uint out_y_idx = ((idx-out_startIdx)/channels)/out_height;
    uint out_c_idx = idx%channels;
    // then, since our input/output images are x,y,c, we need to convert back
    // y,x,c->(y*w+x)*num_c+c; x,y,c->(x*h+y)*num_c+c
    uint out_idx = out_startIdx+(out_y_idx*out_height+out_x_idx)*channels + out_c_idx;

    float result = 0;
    for(int k=0; k<kernel_width; k++){
        int w_diff = k-int(kernel_width/2);

        uint in_x_idx = out_x_idx+w_diff;
        uint in_y_idx = out_y_idx;
        uint in_c_idx = out_c_idx;

        if(in_x_idx>=0 && in_x_idx<out_height){
            uint in_idx = out_startIdx+(in_y_idx*out_height+in_x_idx)*channels + in_c_idx;
            result+=inputImage[in_idx]*horizWeights[k];
        }
        //padding is zero
    }

    outputImage[out_idx] = result;

    // should show RGB bands in either vertical or horizontal
    /*uint wid = gl_WorkGroupID.x;
    if (out_idx%3==wid%3){
        outputImage[out_idx] = min(outputImage[out_idx]+result, 1.0);
    }*/
}