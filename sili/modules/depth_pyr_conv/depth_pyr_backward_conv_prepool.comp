#version 430

layout (local_size_x_id = 0) in;

struct PyramidLevel {
    int startIdx;
    int width;
    int height;
};

struct IndexValue {
    int in_level;
    int out_level;
    float err_grad;  // used for changing value of connection
    float out_grad;  // used for changing strength of connection for some optim algorithms
};

layout(std430, binding = 0) buffer InputBuffer {
    float inputPyr[];
};

layout(std430, binding = 1) buffer InputBufferB {
    float outputPyrErr[];
};

layout(std430, binding = 2) buffer OutputBuffer {
    IndexValue out_f[];
};

layout(std430, binding = 3) buffer PyrLvlBuffer {
    int channels;
    int levels;
    PyramidLevel pyramidLevels[];
};

layout(std430, binding = 4) buffer depthConvBuffer {
    float depthWeights[];
};


layout(std430, binding = 5) buffer con_array {
    float weight_cons[];
};

float bilinearInterpolation(float x, float y, float bottomLeft, float bottomRight, float topLeft, float topRight) {
    float left = mix(topLeft, bottomLeft, y);
    float right = mix(topRight, bottomRight, y);
    return mix(left, right, x);
}

// Shared memory to store indices and values
shared float shared_err_grad[gl_WorkGroupSize.x];
shared float shared_fwd_grad[gl_WorkGroupSize.x];
shared int shared_in_lvls[gl_WorkGroupSize.x];
shared int shared_out_lvls[gl_WorkGroupSize.x];
shared int next_index[gl_WorkGroupSize.x];

void out_check(){
    if (gl_LocalInvocationID.x == 0) {
        out_f[gl_WorkGroupID.x].in_level = 1;
        out_f[gl_WorkGroupID.x].out_level = 1;
        out_f[gl_WorkGroupID.x].err_grad = 1;
        out_f[gl_WorkGroupID.x].out_grad = 1;
    }
}

layout(constant_id = 1) const uint offset = 0;
layout(constant_id = 2) const float epsilon = 0.1;

void main() {
    // Get the global index
    uint globalIndex = gl_GlobalInvocationID.x;

    // Initialize local variables
    int out_ind = int(globalIndex/levels);
    int in_lvl = int(globalIndex%levels);

    int in_startIdx = pyramidLevels[in_lvl].startIdx * channels;
    int in_width = pyramidLevels[in_lvl].width;
    int in_height = pyramidLevels[in_lvl].height;

    int out_lvl=-1;
    int out_startIdx = -1;
    int out_width = -1;
    int out_height = -1;
    for(int level=0;level<levels-1;level++) {
        if(int(out_ind)>=pyramidLevels[level].startIdx*channels && int(out_ind)<pyramidLevels[level+1].startIdx*channels+channels){
            out_lvl = level;
            out_startIdx = pyramidLevels[level].startIdx*channels;
            out_width = pyramidLevels[level].width;
            out_height = pyramidLevels[level].height;
            // no breaks. All invocations run the same lines.
        }
    }
    if(out_lvl==-1){// top level wasn't checked
        if(int(out_ind)>=pyramidLevels[levels-1].startIdx*channels && int(out_ind)<pyramidLevels[levels-1].startIdx*channels+channels) {
            out_lvl = levels - 1;
            out_startIdx = pyramidLevels[out_lvl].startIdx * channels;
            out_width = pyramidLevels[out_lvl].width;
            out_height = pyramidLevels[out_lvl].height;
        }
    }

    if(out_lvl!=-1) {
        int y_current = int(((out_ind - out_startIdx) / channels) % out_height);
        int x_current = int(((out_ind - out_startIdx) / channels) / out_height);
        int c_current = int(int(out_ind) % channels);

        float w_scale = float(in_width) / float(out_width);
        float h_scale = float(in_height) / float(out_height);

        float inputX = float(x_current) * w_scale;
        float inputY = float(y_current) * h_scale;

        // Find the four neighboring pixels for bilinear interpolation
        int topLeftIdx = in_startIdx * channels + int(floor(inputX) * in_height * channels + floor(inputY) * channels + c_current);
        int topRightIdx = topLeftIdx;
        int bottomLeftIdx = topLeftIdx;
        int bottomRightIdx = topRightIdx;
        if (inputX + 1 <= in_width) {
            topRightIdx = topLeftIdx + in_height * channels;
        }
        if (inputY + 1 <= in_height) {
            bottomLeftIdx = topLeftIdx + channels;
            bottomRightIdx = topRightIdx + channels;
        }

        // Perform bilinear interpolation
        float topLeft = inputPyr[topLeftIdx];
        float topRight = inputPyr[topRightIdx];
        float bottomLeft = inputPyr[bottomLeftIdx];
        float bottomRight = inputPyr[bottomRightIdx];
        float input_val = bilinearInterpolation(fract(inputX), fract(inputY), bottomLeft, bottomRight, topLeft, topRight);

        //if our output is smaller, that means we were scaled and contributed to more pixels
        //float res_diff = (pyramidLevels[0].height * pyramidLevels[0].width) / (out_width * out_height);

        // this is just input times output error:
        float err_grad = input_val * outputPyrErr[out_ind];  // dG/dW
        // this is just input times output (output contribution from specific synapse):
        float out_grad = input_val * input_val * depthWeights[in_lvl*levels + out_lvl];  // dO/dW

        // Load product into shared memory by the first thread in the workgroup
        uint localIndexX = gl_LocalInvocationID.x;
        shared_in_lvls[localIndexX] = in_lvl;
        shared_out_lvls[localIndexX] = out_lvl;
        shared_err_grad[localIndexX] = err_grad;
        shared_fwd_grad[localIndexX] = out_grad;

        // Synchronize within the work group
        barrier();

        // max reduction
        for (uint stride = gl_WorkGroupSize.x / 2; stride > 0; stride /= 2) {
            if (localIndexX < stride) {
                uint other_index = localIndexX + stride;
                if (// history of competence matters: would you fire an executive that just messed up or an intern that messed up in the first minute? The answer should be obvious.
                abs(shared_err_grad[other_index]) / (abs(weight_cons[shared_in_lvls[other_index] * levels + shared_out_lvls[other_index]]) + epsilon)
                >
                abs(shared_err_grad[localIndexX]) / (abs(weight_cons[shared_in_lvls[localIndexX] * levels + shared_out_lvls[localIndexX]]) + epsilon)
                ) {
                    shared_err_grad[localIndexX] = shared_err_grad[other_index];
                    shared_fwd_grad[localIndexX] = shared_fwd_grad[other_index];
                    shared_in_lvls[localIndexX] = shared_in_lvls[other_index];
                    shared_out_lvls[localIndexX] = shared_out_lvls[other_index];
                }
            }
            barrier();
        }

        // Write reduction to global memory for each workgroup
        if (localIndexX == 0) {
            out_f[gl_WorkGroupID.x].in_level = shared_in_lvls[0];
            out_f[gl_WorkGroupID.x].out_level = shared_out_lvls[0];
            out_f[gl_WorkGroupID.x].err_grad = shared_err_grad[0];
            out_f[gl_WorkGroupID.x].out_grad = shared_fwd_grad[0];
        }
    }
}
