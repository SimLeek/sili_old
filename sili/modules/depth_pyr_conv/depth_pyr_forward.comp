#version 430

//layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout (local_size_x_id = 0) in;

struct PyramidLevel {
    int startIdx;
    int width;
    int height;
};

layout(std430, binding = 0) buffer InputBuffer {
    float inputImage[];
};

layout(std430, binding = 1) buffer PyramidData {
    int channels;
    int levels;
    PyramidLevel pyramidLevels[];
};

layout(std430, binding = 2) buffer OutputBuffer {
    float outputImage[];
};

layout(std430, binding = 3) buffer depthConvBuffer {
    float depthWeights[];
};

float bilinearInterpolation(float x, float y, float bottomLeft, float bottomRight, float topLeft, float topRight) {
    float left = mix(topLeft, bottomLeft, y);
    float right = mix(topRight, bottomRight, y);
    return mix(left, right, x);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;

    int out_level = -1;
    int out_startIdx = -1;
    int out_width = -1;
    int out_height = -1;
    for(int level=0;level<levels-1;level++) {
        if(int(idx)>=pyramidLevels[level].startIdx*channels && int(idx)<pyramidLevels[level+1].startIdx*channels){
            out_level = level;
            out_startIdx = pyramidLevels[level].startIdx*channels;
            out_width = pyramidLevels[level].width;
            out_height = pyramidLevels[level].height;
            // no breaks. All invocations run the same lines.
        }
    }
    if(out_level==-1){// top level wasn't checked
        out_level = levels-1;
        out_startIdx = pyramidLevels[out_level].startIdx*channels;
        out_width = pyramidLevels[out_level].width;
        out_height = pyramidLevels[out_level].height;
    }
    int y_current = int(((gl_GlobalInvocationID.x-out_startIdx) / channels) % out_height);
    int x_current = int(((gl_GlobalInvocationID.x-out_startIdx) / channels) / out_height);
    int c_current = int(int(gl_GlobalInvocationID.x) % channels);

    float result = 0;
    for(int l_in=0; l_in<levels; l_in++){
        //if (l_in != out_level) {  // no speedup because GPUs mostly operate in lock step
            float w_scale = float(pyramidLevels[l_in].width) / float(out_width);
            float h_scale = float(pyramidLevels[l_in].height) / float(out_height);
            int w_scale_i = int(w_scale);
            int h_scale_i = int(h_scale);
            float inputX = float(x_current) * w_scale;
            float inputY = float(y_current) * h_scale;
            // Find the four neighboring pixels for bilinear interpolation
            // But ensure we don't take from outside of the image.
            // Very important since the top of the pyramid is 1 pixel by 1 pixel and contains the average color
            int topLeftIdx = pyramidLevels[l_in].startIdx * channels + int(floor(inputX) * pyramidLevels[l_in].height * channels + floor(inputY) * channels + c_current);
            int topRightIdx = topLeftIdx;
            int bottomLeftIdx = topLeftIdx;
            int bottomRightIdx = topRightIdx;
            if(inputX+1<pyramidLevels[l_in].width){
                topRightIdx = topLeftIdx + pyramidLevels[l_in].height * channels;
            }
            if(inputY+1<pyramidLevels[l_in].height){
                bottomLeftIdx = topLeftIdx + channels;
                bottomRightIdx = topRightIdx + channels;
            }

            // Perform bilinear interpolation
            float topLeft = inputImage[topLeftIdx];
            float topRight = inputImage[topRightIdx];
            float bottomLeft = inputImage[bottomLeftIdx];
            float bottomRight = inputImage[bottomRightIdx];
            float bilin = bilinearInterpolation(fract(inputX), fract(inputY), bottomLeft, bottomRight, topLeft, topRight);

            result += bilin * depthWeights[l_in*levels + out_level];
        /*}else{
            result += inputImage[idx] * depthWeights[l_in*levels + out_level];
        }*/
    }

    outputImage[idx] = result;
}